# Workflow for the main branch
name: CI/CD

on:
  # Triggers the workflow for main branch
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: tite-5g00ev16-3003/2024-practice-project-keekki-backend
  FRONTEND_IMAGE_NAME: tite-5g00ev16-3003/2024-practice-project-keekki-frontend

jobs:
  build:
    name: Build Images
    timeout-minutes: 5
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Fetch code
        uses: actions/checkout@v4.1.1

      - name: Install Node
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "18"

      - name: Set up QEmu
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push the Backend Image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}"

      - name: Build and Push the Frontend Image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}"

  deploy:
    name: Server Deployment
    timeout-minutes: 5
    runs-on: ubuntu-latest

    needs: build

    permissions:
      contents: read
      packages: write

    steps:
      - name: Fetch code
        uses: actions/checkout@v4.1.1

      - name: Install OpenVPN and RSync
        run: |
          sudo apt update
          sudo apt --assume-yes --no-install-recommends install openvpn openvpn-systemd-resolved rsync

      - name: Setup the VPN configs
        run: |
          echo "${{ secrets.VPN_CONFIG }}" > config.ovpn
          echo "${{ secrets.VPN_PASSWORD }}" > secret.txt

      - name: Connect VPN
        run: sudo openvpn --config config.ovpn --daemon --log vpn.log

      - name: Wait for VPN connection
        timeout-minutes: 1
        run: until ping -c1 ${{ secrets.REMOTE_SERVER }}; do sleep 10; done

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_KEY_PRIVATE }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_SERVER }} >> ~/.ssh/known_hosts

            # Create stack config and sync to the VM server

      - name: Create and sync stack configuration
        run: |
          mkdir -p dine_backend
          cp docker-compose.server.yml dine_backend/docker-compose.yml
          echo "${{ secrets.PROD_ENV_FILE }}" > dine_backend/.env
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}" >> dine_backend/.env
          rsync -r dine_backend "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}:./"

      # SSH into VM server and bring up the stack
      - name: Start containers via SSH
        run: ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}
          "
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }};
          cd dine_backend;
          docker-compose pull;
          docker-compose up -d;
          "

      - name: Kill VPN connection
        if: always()
        run: |
          sudo chmod 777 vpn.log
          sudo killall openvpn
